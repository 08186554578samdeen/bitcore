#!/usr/bin/env node

const program = require('commander');
const promptly = require('promptly');
const { Wallet } = require('../ts_build/src/wallet');

program
  .version(require('../package.json').version)
  .requiredOption('--name <name>', 'REQUIRED - Wallet name')
  .requiredOption('--contractAddress <contractAddress>', 'REQUIRED - Token contract address')
  .option('--tokenName <tokenName>', 'optional - Custom name for token')
  .option('--storageType <storageType>', 'optional - Name of the database to use (Mongo | Level | TextFile)')
  .option('--path <path>', 'optional - Custom wallet storage path')
  .parse(process.argv);

let wallet;

const main = async () => {
  const { name, path, contractAddress, storageType, tokenName } = program.opts();
  try {
    wallet = await Wallet.loadWallet({ name, path, storageType });
    if (!['MATIC', 'ETH'].includes(wallet.chain)) {
      throw new Error('Cannot add token to non-ETH wallet.');
    }
    const token = await wallet.getToken(contractAddress);
    const tokenObj = {
      symbol: token.symbol,
      address: contractAddress,
      decimals: token.decimals,
      name: tokenName || token.symbol
    };
    const nameNotUnique = wallet.tokens.find(t => t.name === tokenObj.name || (t.symbol === tokenObj.name && t.name === undefined));
    if (nameNotUnique) {
      if (nameNotUnique.address === contractAddress) {
        console.log('Token already in wallet');
        return;
      }
      console.log(`tokenName ${tokenObj.name} already exists in this wallet (symbol: ${nameNotUnique.symbol}. contractAddress: ${nameNotUnique.address})`);
      console.log('Try again with a unique tokenName');
      return;
    }
    const existing = wallet.tokens.find(f => f.address === contractAddress);
    if (existing) {
      console.log(`This wallet already has token ${existing.symbol} (${existing.address})`);
      const ans = await promptly.confirm('Would you like to replace it? (y/n)');
      if (!ans) {
        return;
      }
      wallet.tokens = wallet.tokens.filter(f => f.address !== contractAddress);
    }
    await wallet.addToken(tokenObj);
    console.log(`Successfully added ${token.symbol}`);
  } catch (e) {
    console.error(e);
  }
};

main()
  .catch(console.error)
  .finally(() => wallet?.storage?.close());
